/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SharerService } from "../sharer.service";
import { SharerCreateInput } from "./SharerCreateInput";
import { Sharer } from "./Sharer";
import { SharerFindManyArgs } from "./SharerFindManyArgs";
import { SharerWhereUniqueInput } from "./SharerWhereUniqueInput";
import { SharerUpdateInput } from "./SharerUpdateInput";
import { ShareRecordFindManyArgs } from "../../shareRecord/base/ShareRecordFindManyArgs";
import { ShareRecord } from "../../shareRecord/base/ShareRecord";
import { ShareRecordWhereUniqueInput } from "../../shareRecord/base/ShareRecordWhereUniqueInput";

export class SharerControllerBase {
  constructor(protected readonly service: SharerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Sharer })
  async createSharer(@common.Body() data: SharerCreateInput): Promise<Sharer> {
    return await this.service.createSharer({
      data: {
        ...data,

        lottery: data.lottery
          ? {
              connect: data.lottery,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        email: true,
        id: true,

        lottery: {
          select: {
            id: true,
          },
        },

        name: true,
        points: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Sharer] })
  @ApiNestedQuery(SharerFindManyArgs)
  async sharers(@common.Req() request: Request): Promise<Sharer[]> {
    const args = plainToClass(SharerFindManyArgs, request.query);
    return this.service.sharers({
      ...args,
      select: {
        createdAt: true,
        email: true,
        id: true,

        lottery: {
          select: {
            id: true,
          },
        },

        name: true,
        points: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Sharer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async sharer(
    @common.Param() params: SharerWhereUniqueInput
  ): Promise<Sharer | null> {
    const result = await this.service.sharer({
      where: params,
      select: {
        createdAt: true,
        email: true,
        id: true,

        lottery: {
          select: {
            id: true,
          },
        },

        name: true,
        points: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Sharer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSharer(
    @common.Param() params: SharerWhereUniqueInput,
    @common.Body() data: SharerUpdateInput
  ): Promise<Sharer | null> {
    try {
      return await this.service.updateSharer({
        where: params,
        data: {
          ...data,

          lottery: data.lottery
            ? {
                connect: data.lottery,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          email: true,
          id: true,

          lottery: {
            select: {
              id: true,
            },
          },

          name: true,
          points: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Sharer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSharer(
    @common.Param() params: SharerWhereUniqueInput
  ): Promise<Sharer | null> {
    try {
      return await this.service.deleteSharer({
        where: params,
        select: {
          createdAt: true,
          email: true,
          id: true,

          lottery: {
            select: {
              id: true,
            },
          },

          name: true,
          points: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/shareRecords")
  @ApiNestedQuery(ShareRecordFindManyArgs)
  async findShareRecords(
    @common.Req() request: Request,
    @common.Param() params: SharerWhereUniqueInput
  ): Promise<ShareRecord[]> {
    const query = plainToClass(ShareRecordFindManyArgs, request.query);
    const results = await this.service.findShareRecords(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        participatingCount: true,
        sharedWith: true,

        sharer: {
          select: {
            id: true,
          },
        },

        successfulShare: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/shareRecords")
  async connectShareRecords(
    @common.Param() params: SharerWhereUniqueInput,
    @common.Body() body: ShareRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      shareRecords: {
        connect: body,
      },
    };
    await this.service.updateSharer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/shareRecords")
  async updateShareRecords(
    @common.Param() params: SharerWhereUniqueInput,
    @common.Body() body: ShareRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      shareRecords: {
        set: body,
      },
    };
    await this.service.updateSharer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/shareRecords")
  async disconnectShareRecords(
    @common.Param() params: SharerWhereUniqueInput,
    @common.Body() body: ShareRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      shareRecords: {
        disconnect: body,
      },
    };
    await this.service.updateSharer({
      where: params,
      data,
      select: { id: true },
    });
  }
}
