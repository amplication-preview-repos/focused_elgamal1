/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Sharer } from "./Sharer";
import { SharerCountArgs } from "./SharerCountArgs";
import { SharerFindManyArgs } from "./SharerFindManyArgs";
import { SharerFindUniqueArgs } from "./SharerFindUniqueArgs";
import { CreateSharerArgs } from "./CreateSharerArgs";
import { UpdateSharerArgs } from "./UpdateSharerArgs";
import { DeleteSharerArgs } from "./DeleteSharerArgs";
import { ShareRecordFindManyArgs } from "../../shareRecord/base/ShareRecordFindManyArgs";
import { ShareRecord } from "../../shareRecord/base/ShareRecord";
import { Lottery } from "../../lottery/base/Lottery";
import { SharerService } from "../sharer.service";
@graphql.Resolver(() => Sharer)
export class SharerResolverBase {
  constructor(protected readonly service: SharerService) {}

  async _sharersMeta(
    @graphql.Args() args: SharerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Sharer])
  async sharers(@graphql.Args() args: SharerFindManyArgs): Promise<Sharer[]> {
    return this.service.sharers(args);
  }

  @graphql.Query(() => Sharer, { nullable: true })
  async sharer(
    @graphql.Args() args: SharerFindUniqueArgs
  ): Promise<Sharer | null> {
    const result = await this.service.sharer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Sharer)
  async createSharer(@graphql.Args() args: CreateSharerArgs): Promise<Sharer> {
    return await this.service.createSharer({
      ...args,
      data: {
        ...args.data,

        lottery: args.data.lottery
          ? {
              connect: args.data.lottery,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Sharer)
  async updateSharer(
    @graphql.Args() args: UpdateSharerArgs
  ): Promise<Sharer | null> {
    try {
      return await this.service.updateSharer({
        ...args,
        data: {
          ...args.data,

          lottery: args.data.lottery
            ? {
                connect: args.data.lottery,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Sharer)
  async deleteSharer(
    @graphql.Args() args: DeleteSharerArgs
  ): Promise<Sharer | null> {
    try {
      return await this.service.deleteSharer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [ShareRecord], { name: "shareRecords" })
  async findShareRecords(
    @graphql.Parent() parent: Sharer,
    @graphql.Args() args: ShareRecordFindManyArgs
  ): Promise<ShareRecord[]> {
    const results = await this.service.findShareRecords(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Lottery, {
    nullable: true,
    name: "lottery",
  })
  async getLottery(@graphql.Parent() parent: Sharer): Promise<Lottery | null> {
    const result = await this.service.getLottery(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
