/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LotteryService } from "../lottery.service";
import { LotteryCreateInput } from "./LotteryCreateInput";
import { Lottery } from "./Lottery";
import { LotteryFindManyArgs } from "./LotteryFindManyArgs";
import { LotteryWhereUniqueInput } from "./LotteryWhereUniqueInput";
import { LotteryUpdateInput } from "./LotteryUpdateInput";
import { ParticipantFindManyArgs } from "../../participant/base/ParticipantFindManyArgs";
import { Participant } from "../../participant/base/Participant";
import { ParticipantWhereUniqueInput } from "../../participant/base/ParticipantWhereUniqueInput";
import { RewardFindManyArgs } from "../../reward/base/RewardFindManyArgs";
import { Reward } from "../../reward/base/Reward";
import { RewardWhereUniqueInput } from "../../reward/base/RewardWhereUniqueInput";
import { SharerFindManyArgs } from "../../sharer/base/SharerFindManyArgs";
import { Sharer } from "../../sharer/base/Sharer";
import { SharerWhereUniqueInput } from "../../sharer/base/SharerWhereUniqueInput";

export class LotteryControllerBase {
  constructor(protected readonly service: LotteryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Lottery })
  async createLottery(
    @common.Body() data: LotteryCreateInput
  ): Promise<Lottery> {
    return await this.service.createLottery({
      data: {
        ...data,

        organizer: data.organizer
          ? {
              connect: data.organizer,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        description: true,
        endDate: true,
        id: true,

        organizer: {
          select: {
            id: true,
          },
        },

        startDate: true,
        title: true,
        totalRewards: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Lottery] })
  @ApiNestedQuery(LotteryFindManyArgs)
  async lotteries(@common.Req() request: Request): Promise<Lottery[]> {
    const args = plainToClass(LotteryFindManyArgs, request.query);
    return this.service.lotteries({
      ...args,
      select: {
        createdAt: true,
        description: true,
        endDate: true,
        id: true,

        organizer: {
          select: {
            id: true,
          },
        },

        startDate: true,
        title: true,
        totalRewards: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Lottery })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async lottery(
    @common.Param() params: LotteryWhereUniqueInput
  ): Promise<Lottery | null> {
    const result = await this.service.lottery({
      where: params,
      select: {
        createdAt: true,
        description: true,
        endDate: true,
        id: true,

        organizer: {
          select: {
            id: true,
          },
        },

        startDate: true,
        title: true,
        totalRewards: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Lottery })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLottery(
    @common.Param() params: LotteryWhereUniqueInput,
    @common.Body() data: LotteryUpdateInput
  ): Promise<Lottery | null> {
    try {
      return await this.service.updateLottery({
        where: params,
        data: {
          ...data,

          organizer: data.organizer
            ? {
                connect: data.organizer,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          description: true,
          endDate: true,
          id: true,

          organizer: {
            select: {
              id: true,
            },
          },

          startDate: true,
          title: true,
          totalRewards: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Lottery })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLottery(
    @common.Param() params: LotteryWhereUniqueInput
  ): Promise<Lottery | null> {
    try {
      return await this.service.deleteLottery({
        where: params,
        select: {
          createdAt: true,
          description: true,
          endDate: true,
          id: true,

          organizer: {
            select: {
              id: true,
            },
          },

          startDate: true,
          title: true,
          totalRewards: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/participants")
  @ApiNestedQuery(ParticipantFindManyArgs)
  async findParticipants(
    @common.Req() request: Request,
    @common.Param() params: LotteryWhereUniqueInput
  ): Promise<Participant[]> {
    const query = plainToClass(ParticipantFindManyArgs, request.query);
    const results = await this.service.findParticipants(params.id, {
      ...query,
      select: {
        createdAt: true,
        email: true,
        id: true,

        lottery: {
          select: {
            id: true,
          },
        },

        name: true,
        points: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/participants")
  async connectParticipants(
    @common.Param() params: LotteryWhereUniqueInput,
    @common.Body() body: ParticipantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      participants: {
        connect: body,
      },
    };
    await this.service.updateLottery({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/participants")
  async updateParticipants(
    @common.Param() params: LotteryWhereUniqueInput,
    @common.Body() body: ParticipantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      participants: {
        set: body,
      },
    };
    await this.service.updateLottery({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/participants")
  async disconnectParticipants(
    @common.Param() params: LotteryWhereUniqueInput,
    @common.Body() body: ParticipantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      participants: {
        disconnect: body,
      },
    };
    await this.service.updateLottery({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/rewards")
  @ApiNestedQuery(RewardFindManyArgs)
  async findRewards(
    @common.Req() request: Request,
    @common.Param() params: LotteryWhereUniqueInput
  ): Promise<Reward[]> {
    const query = plainToClass(RewardFindManyArgs, request.query);
    const results = await this.service.findRewards(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        id: true,

        lottery: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        winner: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/rewards")
  async connectRewards(
    @common.Param() params: LotteryWhereUniqueInput,
    @common.Body() body: RewardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rewards: {
        connect: body,
      },
    };
    await this.service.updateLottery({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/rewards")
  async updateRewards(
    @common.Param() params: LotteryWhereUniqueInput,
    @common.Body() body: RewardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rewards: {
        set: body,
      },
    };
    await this.service.updateLottery({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/rewards")
  async disconnectRewards(
    @common.Param() params: LotteryWhereUniqueInput,
    @common.Body() body: RewardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rewards: {
        disconnect: body,
      },
    };
    await this.service.updateLottery({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/sharers")
  @ApiNestedQuery(SharerFindManyArgs)
  async findSharers(
    @common.Req() request: Request,
    @common.Param() params: LotteryWhereUniqueInput
  ): Promise<Sharer[]> {
    const query = plainToClass(SharerFindManyArgs, request.query);
    const results = await this.service.findSharers(params.id, {
      ...query,
      select: {
        createdAt: true,
        email: true,
        id: true,

        lottery: {
          select: {
            id: true,
          },
        },

        name: true,
        points: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/sharers")
  async connectSharers(
    @common.Param() params: LotteryWhereUniqueInput,
    @common.Body() body: SharerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sharers: {
        connect: body,
      },
    };
    await this.service.updateLottery({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/sharers")
  async updateSharers(
    @common.Param() params: LotteryWhereUniqueInput,
    @common.Body() body: SharerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sharers: {
        set: body,
      },
    };
    await this.service.updateLottery({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/sharers")
  async disconnectSharers(
    @common.Param() params: LotteryWhereUniqueInput,
    @common.Body() body: SharerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sharers: {
        disconnect: body,
      },
    };
    await this.service.updateLottery({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Post("/complete-lottery/:id")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CompleteLottery(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.CompleteLottery(body);
  }
}
