/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { Type } from "class-transformer";
import { IsOptional, ValidateNested } from "class-validator";
import { DateTimeNullableFilter } from "../../util/DateTimeNullableFilter";
import { StringFilter } from "../../util/StringFilter";
import { OrganizerWhereUniqueInput } from "../../organizer/base/OrganizerWhereUniqueInput";
import { ParticipantListRelationFilter } from "../../participant/base/ParticipantListRelationFilter";
import { RewardListRelationFilter } from "../../reward/base/RewardListRelationFilter";
import { SharerListRelationFilter } from "../../sharer/base/SharerListRelationFilter";
import { IntNullableFilter } from "../../util/IntNullableFilter";

@InputType()
class LotteryWhereInput {
  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  description?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  endDate?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: () => OrganizerWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => OrganizerWhereUniqueInput)
  @IsOptional()
  @Field(() => OrganizerWhereUniqueInput, {
    nullable: true,
  })
  organizer?: OrganizerWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => ParticipantListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ParticipantListRelationFilter)
  @IsOptional()
  @Field(() => ParticipantListRelationFilter, {
    nullable: true,
  })
  participants?: ParticipantListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => RewardListRelationFilter,
  })
  @ValidateNested()
  @Type(() => RewardListRelationFilter)
  @IsOptional()
  @Field(() => RewardListRelationFilter, {
    nullable: true,
  })
  rewards?: RewardListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => SharerListRelationFilter,
  })
  @ValidateNested()
  @Type(() => SharerListRelationFilter)
  @IsOptional()
  @Field(() => SharerListRelationFilter, {
    nullable: true,
  })
  sharers?: SharerListRelationFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  startDate?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  title?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  totalRewards?: IntNullableFilter;
}

export { LotteryWhereInput as LotteryWhereInput };
