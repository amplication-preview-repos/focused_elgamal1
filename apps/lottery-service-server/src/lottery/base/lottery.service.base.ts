/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Lottery as PrismaLottery,
  Participant as PrismaParticipant,
  Reward as PrismaReward,
  Sharer as PrismaSharer,
  Organizer as PrismaOrganizer,
} from "@prisma/client";

export class LotteryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.LotteryCountArgs, "select">): Promise<number> {
    return this.prisma.lottery.count(args);
  }

  async lotteries(args: Prisma.LotteryFindManyArgs): Promise<PrismaLottery[]> {
    return this.prisma.lottery.findMany(args);
  }
  async lottery(
    args: Prisma.LotteryFindUniqueArgs
  ): Promise<PrismaLottery | null> {
    return this.prisma.lottery.findUnique(args);
  }
  async createLottery(args: Prisma.LotteryCreateArgs): Promise<PrismaLottery> {
    return this.prisma.lottery.create(args);
  }
  async updateLottery(args: Prisma.LotteryUpdateArgs): Promise<PrismaLottery> {
    return this.prisma.lottery.update(args);
  }
  async deleteLottery(args: Prisma.LotteryDeleteArgs): Promise<PrismaLottery> {
    return this.prisma.lottery.delete(args);
  }

  async findParticipants(
    parentId: string,
    args: Prisma.ParticipantFindManyArgs
  ): Promise<PrismaParticipant[]> {
    return this.prisma.lottery
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .participants(args);
  }

  async findRewards(
    parentId: string,
    args: Prisma.RewardFindManyArgs
  ): Promise<PrismaReward[]> {
    return this.prisma.lottery
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .rewards(args);
  }

  async findSharers(
    parentId: string,
    args: Prisma.SharerFindManyArgs
  ): Promise<PrismaSharer[]> {
    return this.prisma.lottery
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .sharers(args);
  }

  async getOrganizer(parentId: string): Promise<PrismaOrganizer | null> {
    return this.prisma.lottery
      .findUnique({
        where: { id: parentId },
      })
      .organizer();
  }
  async CompleteLottery(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}
