/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OrganizerService } from "../organizer.service";
import { OrganizerCreateInput } from "./OrganizerCreateInput";
import { Organizer } from "./Organizer";
import { OrganizerFindManyArgs } from "./OrganizerFindManyArgs";
import { OrganizerWhereUniqueInput } from "./OrganizerWhereUniqueInput";
import { OrganizerUpdateInput } from "./OrganizerUpdateInput";
import { LotteryFindManyArgs } from "../../lottery/base/LotteryFindManyArgs";
import { Lottery } from "../../lottery/base/Lottery";
import { LotteryWhereUniqueInput } from "../../lottery/base/LotteryWhereUniqueInput";

export class OrganizerControllerBase {
  constructor(protected readonly service: OrganizerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Organizer })
  async createOrganizer(
    @common.Body() data: OrganizerCreateInput
  ): Promise<Organizer> {
    return await this.service.createOrganizer({
      data: data,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        points: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Organizer] })
  @ApiNestedQuery(OrganizerFindManyArgs)
  async organizers(@common.Req() request: Request): Promise<Organizer[]> {
    const args = plainToClass(OrganizerFindManyArgs, request.query);
    return this.service.organizers({
      ...args,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        points: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Organizer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async organizer(
    @common.Param() params: OrganizerWhereUniqueInput
  ): Promise<Organizer | null> {
    const result = await this.service.organizer({
      where: params,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        points: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Organizer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOrganizer(
    @common.Param() params: OrganizerWhereUniqueInput,
    @common.Body() data: OrganizerUpdateInput
  ): Promise<Organizer | null> {
    try {
      return await this.service.updateOrganizer({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          id: true,
          name: true,
          points: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Organizer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOrganizer(
    @common.Param() params: OrganizerWhereUniqueInput
  ): Promise<Organizer | null> {
    try {
      return await this.service.deleteOrganizer({
        where: params,
        select: {
          createdAt: true,
          email: true,
          id: true,
          name: true,
          points: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/lotteries")
  @ApiNestedQuery(LotteryFindManyArgs)
  async findLotteries(
    @common.Req() request: Request,
    @common.Param() params: OrganizerWhereUniqueInput
  ): Promise<Lottery[]> {
    const query = plainToClass(LotteryFindManyArgs, request.query);
    const results = await this.service.findLotteries(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        endDate: true,
        id: true,

        organizer: {
          select: {
            id: true,
          },
        },

        startDate: true,
        title: true,
        totalRewards: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/lotteries")
  async connectLotteries(
    @common.Param() params: OrganizerWhereUniqueInput,
    @common.Body() body: LotteryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lotteries: {
        connect: body,
      },
    };
    await this.service.updateOrganizer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/lotteries")
  async updateLotteries(
    @common.Param() params: OrganizerWhereUniqueInput,
    @common.Body() body: LotteryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lotteries: {
        set: body,
      },
    };
    await this.service.updateOrganizer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/lotteries")
  async disconnectLotteries(
    @common.Param() params: OrganizerWhereUniqueInput,
    @common.Body() body: LotteryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lotteries: {
        disconnect: body,
      },
    };
    await this.service.updateOrganizer({
      where: params,
      data,
      select: { id: true },
    });
  }
}
