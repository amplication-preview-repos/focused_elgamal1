/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ShareRecordService } from "../shareRecord.service";
import { ShareRecordCreateInput } from "./ShareRecordCreateInput";
import { ShareRecord } from "./ShareRecord";
import { ShareRecordFindManyArgs } from "./ShareRecordFindManyArgs";
import { ShareRecordWhereUniqueInput } from "./ShareRecordWhereUniqueInput";
import { ShareRecordUpdateInput } from "./ShareRecordUpdateInput";

export class ShareRecordControllerBase {
  constructor(protected readonly service: ShareRecordService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ShareRecord })
  async createShareRecord(
    @common.Body() data: ShareRecordCreateInput
  ): Promise<ShareRecord> {
    return await this.service.createShareRecord({
      data: {
        ...data,

        sharer: data.sharer
          ? {
              connect: data.sharer,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        participatingCount: true,
        sharedWith: true,

        sharer: {
          select: {
            id: true,
          },
        },

        successfulShare: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ShareRecord] })
  @ApiNestedQuery(ShareRecordFindManyArgs)
  async shareRecords(@common.Req() request: Request): Promise<ShareRecord[]> {
    const args = plainToClass(ShareRecordFindManyArgs, request.query);
    return this.service.shareRecords({
      ...args,
      select: {
        createdAt: true,
        id: true,
        participatingCount: true,
        sharedWith: true,

        sharer: {
          select: {
            id: true,
          },
        },

        successfulShare: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ShareRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async shareRecord(
    @common.Param() params: ShareRecordWhereUniqueInput
  ): Promise<ShareRecord | null> {
    const result = await this.service.shareRecord({
      where: params,
      select: {
        createdAt: true,
        id: true,
        participatingCount: true,
        sharedWith: true,

        sharer: {
          select: {
            id: true,
          },
        },

        successfulShare: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ShareRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateShareRecord(
    @common.Param() params: ShareRecordWhereUniqueInput,
    @common.Body() data: ShareRecordUpdateInput
  ): Promise<ShareRecord | null> {
    try {
      return await this.service.updateShareRecord({
        where: params,
        data: {
          ...data,

          sharer: data.sharer
            ? {
                connect: data.sharer,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          participatingCount: true,
          sharedWith: true,

          sharer: {
            select: {
              id: true,
            },
          },

          successfulShare: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ShareRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteShareRecord(
    @common.Param() params: ShareRecordWhereUniqueInput
  ): Promise<ShareRecord | null> {
    try {
      return await this.service.deleteShareRecord({
        where: params,
        select: {
          createdAt: true,
          id: true,
          participatingCount: true,
          sharedWith: true,

          sharer: {
            select: {
              id: true,
            },
          },

          successfulShare: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
