/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ShareRecord as PrismaShareRecord,
  Sharer as PrismaSharer,
} from "@prisma/client";

export class ShareRecordServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ShareRecordCountArgs, "select">
  ): Promise<number> {
    return this.prisma.shareRecord.count(args);
  }

  async shareRecords(
    args: Prisma.ShareRecordFindManyArgs
  ): Promise<PrismaShareRecord[]> {
    return this.prisma.shareRecord.findMany(args);
  }
  async shareRecord(
    args: Prisma.ShareRecordFindUniqueArgs
  ): Promise<PrismaShareRecord | null> {
    return this.prisma.shareRecord.findUnique(args);
  }
  async createShareRecord(
    args: Prisma.ShareRecordCreateArgs
  ): Promise<PrismaShareRecord> {
    return this.prisma.shareRecord.create(args);
  }
  async updateShareRecord(
    args: Prisma.ShareRecordUpdateArgs
  ): Promise<PrismaShareRecord> {
    return this.prisma.shareRecord.update(args);
  }
  async deleteShareRecord(
    args: Prisma.ShareRecordDeleteArgs
  ): Promise<PrismaShareRecord> {
    return this.prisma.shareRecord.delete(args);
  }

  async getSharer(parentId: string): Promise<PrismaSharer | null> {
    return this.prisma.shareRecord
      .findUnique({
        where: { id: parentId },
      })
      .sharer();
  }
}
