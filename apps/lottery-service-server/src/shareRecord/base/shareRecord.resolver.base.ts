/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ShareRecord } from "./ShareRecord";
import { ShareRecordCountArgs } from "./ShareRecordCountArgs";
import { ShareRecordFindManyArgs } from "./ShareRecordFindManyArgs";
import { ShareRecordFindUniqueArgs } from "./ShareRecordFindUniqueArgs";
import { CreateShareRecordArgs } from "./CreateShareRecordArgs";
import { UpdateShareRecordArgs } from "./UpdateShareRecordArgs";
import { DeleteShareRecordArgs } from "./DeleteShareRecordArgs";
import { Sharer } from "../../sharer/base/Sharer";
import { ShareRecordService } from "../shareRecord.service";
@graphql.Resolver(() => ShareRecord)
export class ShareRecordResolverBase {
  constructor(protected readonly service: ShareRecordService) {}

  async _shareRecordsMeta(
    @graphql.Args() args: ShareRecordCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ShareRecord])
  async shareRecords(
    @graphql.Args() args: ShareRecordFindManyArgs
  ): Promise<ShareRecord[]> {
    return this.service.shareRecords(args);
  }

  @graphql.Query(() => ShareRecord, { nullable: true })
  async shareRecord(
    @graphql.Args() args: ShareRecordFindUniqueArgs
  ): Promise<ShareRecord | null> {
    const result = await this.service.shareRecord(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ShareRecord)
  async createShareRecord(
    @graphql.Args() args: CreateShareRecordArgs
  ): Promise<ShareRecord> {
    return await this.service.createShareRecord({
      ...args,
      data: {
        ...args.data,

        sharer: args.data.sharer
          ? {
              connect: args.data.sharer,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ShareRecord)
  async updateShareRecord(
    @graphql.Args() args: UpdateShareRecordArgs
  ): Promise<ShareRecord | null> {
    try {
      return await this.service.updateShareRecord({
        ...args,
        data: {
          ...args.data,

          sharer: args.data.sharer
            ? {
                connect: args.data.sharer,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ShareRecord)
  async deleteShareRecord(
    @graphql.Args() args: DeleteShareRecordArgs
  ): Promise<ShareRecord | null> {
    try {
      return await this.service.deleteShareRecord(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Sharer, {
    nullable: true,
    name: "sharer",
  })
  async getSharer(
    @graphql.Parent() parent: ShareRecord
  ): Promise<Sharer | null> {
    const result = await this.service.getSharer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
